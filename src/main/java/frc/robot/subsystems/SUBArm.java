// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.math.MathUtil;
import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class SUBArm extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonSRX talonSRXEnhanced;
private Encoder encoder = new Encoder(Constants.ArmConstants.kEncoderChannelA, Constants.ArmConstants.kEncoderChannelB,true,EncodingType.k4X);
PIDController pid = new PIDController(Constants.ArmConstants.kP, Constants.ArmConstants.kI, Constants.ArmConstants.kD);
private double pos = 0;
private boolean useEncoder = true;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public SUBArm() {

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
talonSRXEnhanced = new WPI_TalonSRX(Constants.ArmConstants.kArmTalonID);
pid.setTolerance(Constants.ArmConstants.kPIDTolerance);
    /* Factory default hardware to prevent unexpected behavior */
talonSRXEnhanced.configFactoryDefault();

        /* Invert Motor? and set Break Mode */
talonSRXEnhanced.setInverted(false);
talonSRXEnhanced.setNeutralMode(NeutralMode.Brake);

        /* Set the peak and nominal outputs */
talonSRXEnhanced.configNominalOutputForward(0, 30);
talonSRXEnhanced.configNominalOutputReverse(0, 30);
talonSRXEnhanced.configPeakOutputForward(1, 30);
talonSRXEnhanced.configPeakOutputReverse(-1, 30);


        
/* Configure Sensor */
        // Phase sensor to have positive increment when driving Talon Forward (Green LED)


        











        


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        SmartDashboard.putBoolean("use encoder", useEncoder);
        // This method will be called once per scheduler run
        SmartDashboard.putNumber("armpid", MathUtil.clamp(pid.calculate(encoder.getDistance(), pos)/4,-0.5,0.5));
        SmartDashboard.putNumber("ArmSensorPos", encoder.getDistance());
        SmartDashboard.putNumber("arm distance per pulse",encoder.getDistancePerPulse());
        SmartDashboard.putNumber("arm encoding scale",encoder.getEncodingScale());
        useEncoder = SmartDashboard.getBoolean("use encoder", useEncoder);
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void setPosition(double pos, double measurement) {
        talonSRXEnhanced.set(MathUtil.clamp(pid.calculate(measurement, pos)/4,-0.5,0.5));
        this.pos = pos;
    }

    public void setPower(double pos) {
        if (useEncoder) {
            if (encoder.getDistance() >= 0) {
                talonSRXEnhanced.set(-0.1);
            } else if (encoder.getDistance() <= Constants.ArmConstants.kMaxHeight) {
                talonSRXEnhanced.set(0.1);
            } else {
            talonSRXEnhanced.set(MathUtil.clamp(pos, -0.5, 0.5));
            }   
        } else {
            talonSRXEnhanced.set(MathUtil.clamp(pos, -0.5, 0.5));
        }

    }

    public double getEncoderPos() {
        return encoder.getDistance();
    }
    public boolean atSetpoint() {
        return pid.atSetpoint();
    }
    public void setEncoderTrue() {
        useEncoder = true;
    }
    public void setEncoderFalse() {
        useEncoder = false;
    }
}

